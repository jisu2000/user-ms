package com.hit.userms.security;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;import org.springframework.web.cors.CorsConfiguration;@Configurationpublic class SecurityConfig {    @Autowired    private JwtAuthenticationEntryPoint point;    @Autowired    private JwtAuthenticationFilter filter;    @Autowired    private UserDetailsService userDetailsService;    @Autowired    private PasswordEncoder passwordencoder;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http.csrf(csrf -> csrf.disable())                .authorizeRequests().requestMatchers(UrlConfig.PRIVATE_URL).authenticated()                .requestMatchers(UrlConfig.PUBLIC_URL).permitAll()                .anyRequest()                .authenticated()                .and().exceptionHandling(ex -> ex.authenticationEntryPoint(point))                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));        http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }    @Bean    public DaoAuthenticationProvider daoAuthenticationProvider() {        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();        daoAuthenticationProvider.setUserDetailsService(userDetailsService);        daoAuthenticationProvider.setPasswordEncoder(passwordencoder);        return daoAuthenticationProvider;    }    @Bean    public FilterRegistrationBean coresFilter(){        UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();        CorsConfiguration corsConfiguration=new CorsConfiguration();        corsConfiguration.setAllowCredentials(true);        corsConfiguration.addAllowedOriginPattern("*");        corsConfiguration.addAllowedHeader("Authorization");        corsConfiguration.addAllowedHeader("Content-Type");        corsConfiguration.addAllowedHeader("Accept");        corsConfiguration.addAllowedMethod("POST");        corsConfiguration.addAllowedMethod("GET");        corsConfiguration.addAllowedMethod("DELETE");        corsConfiguration.addAllowedMethod("PUT");        corsConfiguration.addAllowedMethod("OPTIONS");        corsConfiguration.setMaxAge(3600L);        source.registerCorsConfiguration("/**",corsConfiguration);        FilterRegistrationBean bean=new FilterRegistrationBean(new CorsFilter(source));        bean.setOrder(-110);        return bean;    }}