package com.hit.userms.service.impl;import com.hit.userms.dto.AddressDTO;import com.hit.userms.model.AddressEO;import com.hit.userms.model.UserEO;import com.hit.userms.repo.AddressRepo;import com.hit.userms.repo.UserRepo;import com.hit.userms.security.JwtHelper;import com.hit.userms.service.AddressService;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import org.springframework.web.server.ResponseStatusException;import java.util.List;import java.util.stream.Collector;import java.util.stream.Collectors;@Servicepublic class AddressServiceImpl implements AddressService {    @Autowired    private ModelMapper modelMapper;    @Autowired    private AddressRepo addressRepo;    @Autowired    private JwtHelper jwtHelper;    @Autowired    private UserRepo userRepo;    @Override    public AddressDTO addAddress(String token, AddressDTO addressDTO) {        expiryChecker(token);        String email=this.jwtHelper.getUsernameFromToken(token);        UserEO userEO=this.userRepo.findByEmail(email);        if(userEO==null){            throw  new ResponseStatusException(HttpStatus.NOT_FOUND,"User not found");        }        AddressEO addressEO=this.modelMapper.map(addressDTO,AddressEO.class);        addressEO.setUserEO(userEO);        AddressEO saved=this.addressRepo.save(addressEO);        return this.modelMapper.map(saved,AddressDTO.class);    }    @Override    public List<AddressDTO> getAllAddressOfaUser(String token) {        expiryChecker(token);        String email=this.jwtHelper.getUsernameFromToken(token);        UserEO userEO=this.userRepo.findByEmail(email);        if(userEO==null){            throw  new ResponseStatusException(HttpStatus.NOT_FOUND,"User not found");        }        List<AddressEO> addressEOS=this.addressRepo.findByUserEO(userEO);        return addressEOS.stream()                .map(addressEO -> modelMapper.map(addressEO, AddressDTO.class))                .collect(Collectors.toList());    }    @Override    public String deleteAddress(String token, Integer addressId) {        expiryChecker(token);        String email=this.jwtHelper.getUsernameFromToken(token);        UserEO userEO=this.userRepo.findByEmail(email);        if(userEO==null){            throw  new ResponseStatusException(HttpStatus.NOT_FOUND,"User not found");        }        AddressEO addressEO=                this.addressRepo.                        findById(addressId).                        orElseThrow(                                ()-> new ResponseStatusException(HttpStatus.NOT_FOUND,"Address not found"));        if(userEO.getUserId()!=addressEO.getUserEO().getUserId()){            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED,"You have not access to delete the Address");        }        try {          this.addressRepo.delete(addressEO);          return "Address is Deleted successfully";        }catch (Exception e){            return "Something went wrong";        }    }    @Override    public AddressDTO updateAddress(String token, Integer addressId, AddressDTO addressDTO) {        expiryChecker(token);        String email=this.jwtHelper.getUsernameFromToken(token);        UserEO userEO=this.userRepo.findByEmail(email);        if(userEO==null){            throw  new ResponseStatusException(HttpStatus.NOT_FOUND,"User not found");        }        AddressEO addressEO=                this.addressRepo.                        findById(addressId).                        orElseThrow(                                ()-> new ResponseStatusException(HttpStatus.NOT_FOUND,"Address not found"));        if(userEO.getUserId()!=addressEO.getUserEO().getUserId()){            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED,"You have not access to Update the Address");        }        if(addressDTO.getAddressLine1()!=null){            addressEO.setAddressLine1(addressDTO.getAddressLine1());        }        if(addressDTO.getAddressLine2()!=null){            addressEO.setAddressLine2(addressDTO.getAddressLine2());        }        if(addressDTO.getCity()!=null){            addressEO.setCity(addressDTO.getCity());        }        if(addressDTO.getNearByLandMark()!=null){            addressEO.setNearByLandMark(addressDTO.getNearByLandMark());        }        if(addressDTO.getPinCode()!=null){            addressEO.setPinCode(addressDTO.getPinCode());        }        if(addressDTO.getState()!=null){            addressEO.setState(addressDTO.getState());        }        AddressEO saved=this.addressRepo.save(addressEO);        return this.modelMapper.map(saved,AddressDTO.class);    }    void expiryChecker(String token){        if(this.jwtHelper.isTokenExpired(token)){            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,"Token is expired");        }    }}