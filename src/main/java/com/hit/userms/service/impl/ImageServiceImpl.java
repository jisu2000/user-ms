package com.hit.userms.service.impl;import com.hit.userms.model.Image;import com.hit.userms.model.UserEO;import com.hit.userms.repo.ImageRepo;import com.hit.userms.repo.UserRepo;import com.hit.userms.security.JwtHelper;import com.hit.userms.service.ImageService;import com.hit.userms.utils.ImageUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.HttpStatusCode;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.server.ResponseStatusException;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.UUID;@Servicepublic class ImageServiceImpl implements ImageService {    @Autowired    private JwtHelper jwtHelper;    @Autowired    private UserRepo userRepo;    @Autowired    private ImageRepo imageRepo;    @Override    public String upLoadImage(String token, MultipartFile multipartFile) throws IOException {        String email=this.jwtHelper.getUsernameFromToken(token);        UserEO userEO=this.userRepo.findByEmail(email);        if(userEO==null){            throw new ResponseStatusException(HttpStatus.NOT_FOUND,"User not found");        }        Image image = new Image();        image.setId(UUID.randomUUID().toString());        image.setName(multipartFile.getName());        image.setContentType(multipartFile.getContentType());        byte[] imagedata = ImageUtils.compressImage(multipartFile.getBytes(), "jpg", 0.5f);        image.setData(imagedata);        Image saved=   this.imageRepo.save(image);        userEO.setProfilePhoto(saved.getId());        this.userRepo.save(userEO);        return "Image uploaded successfully";    }    @Override    public byte[] getImage(String id) throws IOException {        Image image=this.imageRepo.findById(id).orElseThrow(()->new RuntimeException("Image not found"));        return ImageUtils.decompressImage(image.getData());    }    @Scheduled(cron = "0 0 0 * * *")    void deleteImage(){        List<UserEO> userEOS=this.userRepo.findAll();        List<String> imagesIds=new ArrayList<>();        userEOS.forEach(e-> imagesIds.add(e.getProfilePhoto()));        List<Image> images=this.imageRepo.findAll();        for(Image image: images){            if(!imagesIds.contains(image.getId())){                this.imageRepo.delete(image);            }        }    }}